- name : configure openstack
  hosts: localhost
  connection: local
  gather_facts: no


  vars_files:
    - "vars/params.yml"

  vars:
    OpenStackEnvProvider:
      OS_AUTH_URL: http://{{ devstack.ip }}/identity
      OS_PASSWORD: "{{ devstack.password }}"
      OS_AUTH_TYPE: password
      OS_IDENTITY_API_VERSION: 3
      OS_PROJECT_DOMAIN_ID: default
      OS_USER_DOMAIN_ID: default
      OS_PROJECT_NAME: "{{ openstack.project.provider }}"
      OS_USERNAME: "{{ openstack.username }}"
      OS_TENANT_NAME:  "{{ openstack.project.provider }}"

    OpenStackEnvTenant:
      OS_AUTH_URL: http://{{ devstack.ip }}/identity
      OS_PASSWORD: "{{ devstack.password }}"
      OS_AUTH_TYPE: password
      OS_IDENTITY_API_VERSION: 3
      OS_PROJECT_DOMAIN_ID: default
      OS_USER_DOMAIN_ID: default
      OS_PROJECT_NAME: "{{ openstack.project.tenant }}"
      OS_USERNAME: "{{ openstack.username }}"
      OS_TENANT_NAME:  "{{ openstack.project.tenant }}"

  tasks:

    - name: Create OpenStack Networks for provider project
      os_network:
        state: present
        name: "{{ item.name }}"
        external: "{{ item.external }}"
        shared: "{{ item.shared }}"
      environment: "{{ OpenStackEnvProvider }}"
      loop: "{{ openstack.network.provider }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create OpenStack Subnets for provider project
      os_subnet:
        state: present
        network_name: "{{ item.name }}"
        name: "{{ item.subnet }}"
        cidr: "{{ item.cidr }}"
      environment: "{{ OpenStackEnvProvider }}"
      loop: "{{ openstack.network.provider }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create OpenStack Networks for Tenant project
      os_network:
        state: present
        name: "{{ item.name }}"
        external: false
        shared: false
      environment: "{{ OpenStackEnvTenant }}"
      loop: "{{ openstack.network.tenant }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create OpenStack Subnets for Tenant project (with DNS)
      os_subnet:
        state: present
        network_name: "{{ item.name }}"
        name: "{{ item.subnet }}"
        cidr: "{{ item.cidr }}"
        dns_nameservers: "{{ item.dns_nameservers }}"
      environment: "{{ OpenStackEnvTenant }}"
      loop: "{{ openstack.network.tenant }}"
      when:
        - openstack.network.tenant is defined
        - item.dns_nameservers is defined
      loop_control:
        label: "{{ item.name }}"

    - name: Create OpenStack Subnets for Tenant project (without DNS)
      os_subnet:
        state: present
        network_name: "{{ item.name }}"
        name: "{{ item.subnet }}"
        cidr: "{{ item.cidr }}"
      environment: "{{ OpenStackEnvTenant }}"
      loop: "{{ openstack.network.tenant }}"
      when:
        - openstack.network.tenant is defined
        - item.dns_nameservers is not defined
      loop_control:
        label: "{{ item.name }}"

    - name: Create an OpenStack router for provider project
      os_router:
        state: present
        name: "{{ item.name }}"
        network: "{{ item.network }}"
        interfaces: "{{ item.interfaces }}"
      environment: "{{ OpenStackEnvProvider }}"
      loop: "{{ openstack.router.provider }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create an OpenStack router for Tenant project
      os_router:
        state: present
        name: "{{ item.name }}"
        network: "{{ item.network }}"
        interfaces: "{{ item.interfaces }}"
      environment: "{{ OpenStackEnvTenant }}"
      loop: "{{ openstack.router.tenant }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Uploading a glance image
      os_image:
        name: "{{ item.name }}"
        container_format: bare
        disk_format: qcow2
        state: present
        filename: "{{ item.fileName }}"
      environment: "{{ OpenStackEnvProvider }}"
      loop: "{{ openstack.glance }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create New security Group
      os_security_group:
        state: present
        name: "{{ item.name }}"
        description: "{{ item.description }}"
      environment: "{{ OpenStackEnvTenant }}"
      loop: "{{ openstack.securityGroups }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Adding rule Ingress
      os_security_group_rule:
        direction: ingress
        security_group: "{{ item.0.name }}"
        protocol: "{{ item.1.protocol }}"
        port_range_min: "{{ item.1.port_range_min }}"
        port_range_max: "{{ item.1.port_range_max }}"
        remote_ip_prefix: "{{ item.1.remote_ip_prefix }}"
      environment: "{{ OpenStackEnvTenant }}"
      with_subelements:
        - "{{ openstack.securityGroups }}"
        - rules
      loop_control:
        label: "{{ item.0.name }}"

    - name: Create OpenStack Ssh key
      os_keypair:
        state: present
        name: "{{ item.name }}"
        public_key_file: "{{ item.public_key_file }}"
      environment: "{{ OpenStackEnvTenant }}"
      loop: "{{ openstack.key }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Gather facts about a previously created image
      os_image_facts:
        image: "{{ openstack.vm.image.server }}"
      environment: "{{ OpenStackEnvTenant }}"

    - name: Gather facts about previously created networks
      os_networks_facts:
        name: "{{ openstack.vm.network.server }}"
      environment: "{{ OpenStackEnvTenant }}"

    - name: Gather facts about previously created flavor
      os_flavor_facts:
        name: "{{ openstack.vm.flavor.server }}"
      environment: "{{ OpenStackEnvTenant }}"

    - name: Create a new instance for servers
      os_server:
        state: present
        name: "{{ item.name }}"
        image: "{{ openstack_image.id }}"
        timeout: 60
        key_name: "{{ openstack.vm.key.server }}"
        floating_ip_pools: "{{ openstack.externalNetwork }}"
        security_groups: "{{ openstack.vm.securitygroup.server }}"
        flavor: "{{ openstack_flavors.0.id }}"
        userdata: "{{ openstack.vm.userdata.server }}"
        nics:
          - net-id: "{{ openstack_networks.0.id }}"
        meta:
          hostname: "{{ item.name }}"
      environment: "{{ OpenStackEnvTenant }}"
      loop: "{{ openstack.vm.servers }}"
      ignore_errors: yes

    - name: Gather facts about a previously created image
      os_image_facts:
        image: "{{ openstack.vm.image.client }}"
      environment: "{{ OpenStackEnvTenant }}"

    - name: Gather facts about previously created networks
      os_networks_facts:
        name: "{{ openstack.vm.network.client }}"
      environment: "{{ OpenStackEnvTenant }}"

    - name: Gather facts about previously created flavor
      os_flavor_facts:
        name: "{{ openstack.vm.flavor.client }}"
      environment: "{{ OpenStackEnvTenant }}"

    - name: Create a new instance for client
      os_server:
        state: present
        name: "{{ item.name }}"
        image: "{{ openstack_image.id }}"
        timeout: 30
        key_name: "{{ openstack.vm.key.client }}"
        floating_ip_pools: "{{ openstack.externalNetwork }}"
        security_groups: "{{ openstack.vm.securitygroup.client }}"
        flavor: "{{ openstack_flavors.0.id }}"
        userdata: "{{ openstack.vm.userdata.client }}"
        nics:
          - net-id: "{{ openstack_networks.0.id }}"
        meta:
          hostname: "{{ item.name }}"
      environment: "{{ OpenStackEnvTenant }}"
      loop: "{{ openstack.vm.clients }}"
      ignore_errors: yes

    - name: Retrieve Floating IP for servers
      os_server_facts:
        server: server*
      environment: "{{ OpenStackEnvTenant }}"

    - name: Initialize a list for server IPs
      set_fact:
        serverIpList: []

    - name: Append Private IPs for each servers on a list
      set_fact:
        serverIpList: "{{ serverIpList }} + [ '{{ item.private_v4 }}' ]"
      loop: "{{ openstack_servers }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create a yaml file with server IP
      template:
        src: "{{ vmServer.templateFile }}"
        dest: "{{ item }}"
      delegate_to: 127.0.0.1
      ignore_errors: yes
      loop: "{{ vmServer.output }}"

    - name: Display Floating IP
      debug:
        msg: Server "{{ item.name }}" is reachable at "{{ item.public_v4 }}"
      environment: "{{ OpenStackEnvTenant }}"
      loop: "{{ openstack_servers }}"
      loop_control:
        label: "{{ item.name }}"
      ignore_errors: yes

    - name: Retrieve Floating IP for clients
      os_server_facts:
        server: client*
      environment: "{{ OpenStackEnvTenant }}"

    - name: Display Floating IP
      debug:
        msg: Client "{{ item.name }}" is reachable at "{{ item.public_v4 }}"
      environment: "{{ OpenStackEnvTenant }}"
      loop: "{{ openstack_servers }}"
      loop_control:
        label: "{{ item.name }}"
      ignore_errors: yes
